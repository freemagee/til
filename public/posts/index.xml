<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Front-end web development | Neil Magee</title><link>https://til.neilmagee.com/posts/</link><description>Recent content in Posts on Front-end web development | Neil Magee</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 02 Mar 2020 11:31:54 +0000</lastBuildDate><atom:link href="https://til.neilmagee.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>React controlled input with debounce</title><link>https://til.neilmagee.com/post/react-controlled-input-with-debounce/</link><pubDate>Mon, 02 Mar 2020 11:31:54 +0000</pubDate><guid>https://til.neilmagee.com/post/react-controlled-input-with-debounce/</guid><description>&lt;p>I previously wrote a post about using &lt;a href="https://til.neilmagee.com/post/react-with-debounce/">Lodash debounce with a React component&lt;/a>. I recently had to use a controlled input, that needed a debounce effect on it. But the difference between this new component and the one in my previous post was this new component was written in a functional way, using React hooks.&lt;/p>
&lt;p>So the scope for this component would be to take an initial value from it&amp;rsquo;s parent, handle changes in state, and then when the user has stopped typing, after a short delay, to lift the state up to the parent so that the input value can trigger something in the parent.&lt;/p>
&lt;h2 id="immediate-problems">Immediate problems&lt;/h2>
&lt;p>After writing the new component to use Lodash debounce, and taking advantage of &lt;code>useEffect&lt;/code> to trigger side effects based on the input value changing I immediately saw a problem. I have increased the debounce &amp;ldquo;delay&amp;rdquo; to two seconds to exaggerate the effect.&lt;/p>
&lt;figure>
&lt;img src="https://til.neilmagee.com/images/react-controlled-input-with-debounce/debounce-fail.gif"
alt="Animated gif showing a debounce not working correctly"loading="lazy"
/> &lt;figcaption>
&lt;h4>Debounce gone wrong!&lt;/h4>
&lt;/figcaption>
&lt;/figure></description></item><item><title>Tailwindcss configs</title><link>https://til.neilmagee.com/post/tailwindcss-configs/</link><pubDate>Thu, 23 Jan 2020 10:02:46 +0000</pubDate><guid>https://til.neilmagee.com/post/tailwindcss-configs/</guid><description>&lt;p>Today I learned more about controlling &lt;a href="https://tailwindcss.com">Tailwindcss&lt;/a> output CSS. Based on my &lt;a href="https://til.neilmagee.com/post/controlling-tailwindcss/">previous post&lt;/a> I am now in a position to use Tailwindcss on a client project. That means I have been digging into the documentation and that has revealed to me a few more intricacies of the &lt;code>tailwind.config.js&lt;/code>.&lt;/p>
&lt;p>I started off by adding only the corePlugins I wanted to use to the config. But as that list grew it became clear that selectively disabling corePlugins was going to be simpler than adding the ones I wanted to use.&lt;/p>
&lt;p>So I got a list of all the &lt;a href="https://tailwindcss.com/docs/configuration/#core-plugins">corePlugins&lt;/a>, processed it in my text editor and used that to generate some boilerplate configs. Those configs are meant to be edited to taste and not used as they are.&lt;/p>
&lt;p>I put this together in a new &lt;a href="https://github.com/freemagee/tailwindcss-configs">GitHub repo&lt;/a> with some explanations of the configs and examples of their output CSS.&lt;/p></description></item><item><title>Subtle art of performance wins</title><link>https://til.neilmagee.com/post/subtle-art-of-performance-wins/</link><pubDate>Thu, 12 Dec 2019 09:45:52 +0000</pubDate><guid>https://til.neilmagee.com/post/subtle-art-of-performance-wins/</guid><description>&lt;p>Today I learned more about the subtle art of javascript performance. I have been doing a few algorithm challenges on &lt;a href="https://www.freecodecamp.org/">freeCodeCamp&lt;/a>, which is a great resource. Whilst completing one titled &lt;em>&amp;ldquo;Intermediate Algorithm Scripting: Smallest Common Multiple&amp;rdquo;&lt;/em> I had a look at what other solutions people had posted, and how they compared to mine. A user had put together a CodePen running &lt;a href="https://benchmarkjs.com/">BenchmarkJS&lt;/a> that contained about four solutions. I added my solution (below) to the benchmark test and the results were surprising.&lt;/p></description></item><item><title>Asynchronous redux - Part 2</title><link>https://til.neilmagee.com/post/asynchronous-redux-part-2/</link><pubDate>Tue, 12 Nov 2019 19:31:41 +0000</pubDate><guid>https://til.neilmagee.com/post/asynchronous-redux-part-2/</guid><description>&lt;p>Following on from my &lt;a href="https://til.neilmagee.com/post/asynchronous-redux-pt1/">previous post&lt;/a>, I am going to show a real example of asynchronous redux. The pattern below is used in many places in the app I am working on. It provides control for what is going to happen when the app needs to request/interact with data from the API.&lt;/p></description></item><item><title>Asynchronous redux - Part 1</title><link>https://til.neilmagee.com/post/asynchronous-redux-part-1/</link><pubDate>Mon, 28 Oct 2019 09:29:17 +0000</pubDate><guid>https://til.neilmagee.com/post/asynchronous-redux-part-1/</guid><description>&lt;p>This is not a traditional &lt;strong>&amp;ldquo;Today I learned&amp;rdquo;&lt;/strong> post. It is more like a &lt;strong>&amp;ldquo;Recently I learned&amp;rdquo;&lt;/strong>. I have been using &lt;a href="https://redux.js.org/">Redux&lt;/a> as a system to control state across an app that has a lot of state. Once you get used to the actionType, action, reducer and selector pattern it really provides a deep level of control.&lt;/p>
&lt;h2 id="state-complexity">State complexity&lt;/h2>
&lt;p>It was not long before the need for complex redux actions became clear when the app required data from APIs. That data needed to be requested, processed and added to the redux store before other components could consume it.&lt;/p>
&lt;p>This lead me to &lt;a href="https://github.com/reduxjs/redux-thunk">Redux Thunk&lt;/a> as a way to define actions that were more complex than simply returning a plain object. Often these actions would need to execute promises. So a need to control the sequence of these actions was becoming a priority for the app.&lt;/p></description></item><item><title>Declarative vs. Imperative programming</title><link>https://til.neilmagee.com/post/declarative-vs.-imperative-programming/</link><pubDate>Mon, 09 Sep 2019 18:11:45 +0100</pubDate><guid>https://til.neilmagee.com/post/declarative-vs.-imperative-programming/</guid><description>&lt;p>Today I learned more about the distinction between &lt;em>declarative&lt;/em> and &lt;em>imperative&lt;/em> programming. I have seen the terms used in various places, but I could not give a good explanation about what they mean. So with a bit of curiosity and I thought that I would get a better handle on the definition.&lt;/p>
&lt;blockquote>
&lt;p>Imperative programming is like &lt;strong>how&lt;/strong> you do something, and declarative programming is more like &lt;strong>what&lt;/strong> you do.&lt;/p>
&lt;/blockquote></description></item><item><title>Controlling Tailwindcss</title><link>https://til.neilmagee.com/post/controlling-tailwindcss/</link><pubDate>Thu, 08 Aug 2019 14:49:02 +0100</pubDate><guid>https://til.neilmagee.com/post/controlling-tailwindcss/</guid><description>&lt;p>Today I learned how to control &lt;a href="https://tailwindcss.com">Tailwindcss&lt;/a>. I am planning on using &lt;strong>Tailwindcss&lt;/strong> on an upcoming project and in order to put something new like this onto a production website, I need to understand it deeply.&lt;/p>
&lt;h2 id="tailwindcss-out-of-the-box">Tailwindcss out of the box&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="c">/* input.css */&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">tailwind&lt;/span> &lt;span class="nt">base&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">tailwind&lt;/span> &lt;span class="nt">components&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">tailwind&lt;/span> &lt;span class="nt">utilities&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// tailwind.config.js
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">theme&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="nx">variants&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;span class="nx">plugins&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># command&lt;/span>
tailwind build input.css -o output.css
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Putting the above together and running the command will output a &lt;code>css&lt;/code> file that is &lt;strong>54309&lt;/strong> lines of code and &lt;strong>854.59KB&lt;/strong> in file size! The developers talk about this on the &lt;a href="https://tailwindcss.com/docs/controlling-file-size">official site&lt;/a> and it is not the recommended way to use Tailwindcss. What I needed to know was what config settings could create a very minimal output that I could add to as I needed it.&lt;/p></description></item><item><title>Material UI theming and style overrides - Part 5</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-5/</link><pubDate>Mon, 05 Aug 2019 11:54:29 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-5/</guid><description>&lt;p>Today I learned that sometimes a &lt;strong>refactor&lt;/strong> is not always better, just &lt;em>different&lt;/em>. I followed through with my plan to split my styles out into individual modules:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// Example styles module &amp;#39;body.js&amp;#39;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="nx">CustomTheme&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;../../Theme&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">formBuilder&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">paddingBottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">formBuilderContainer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">maxWidth&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;770px&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">padding&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That module sits in a &lt;code>/Styles&lt;/code> folder, at the same level as my container component, and is exposed via an &lt;code>index.js&lt;/code> file like so:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">export&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">as&lt;/span> &lt;span class="nx">body&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;./body&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Material UI theming and style overrides - Part 4</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-4/</link><pubDate>Fri, 02 Aug 2019 14:49:47 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-4/</guid><description>&lt;p>Today I learned I still don&amp;rsquo;t have a good answer when it comes to managing &lt;strong>CSS-in-JS&lt;/strong>. &lt;a href="https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-pt3/">Last time&lt;/a> I discussed this topic I had decided to make a single &lt;code>Styles.js&lt;/code> object that contained style overrides to Material UI. I consolidated all my components styles into that &lt;code>Styles.js&lt;/code> file. Abbreviated example below:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="nx">CustomTheme&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;../Theme&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Styles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">formPreviewContainer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">maxWidth&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;770px&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">paddingTop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">paddingBottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">formHeader&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">position&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;relative&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">paddingTop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">paddingBottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">paddingLeft&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">paddingRight&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">marginBottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">backgroundColor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">palette&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">primary&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">main&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="c1">// ... other styles omitted for brevity ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">textInput&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;&amp;amp; .MuiInput-underline:before&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">borderBottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`1px solid &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">palette&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">grey&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">300&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">breakpoints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">down&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sm&amp;#34;&lt;/span>&lt;span class="p">)]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;100%&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">breakpoints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">up&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;md&amp;#34;&lt;/span>&lt;span class="p">)]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;50%&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">textArea&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;100%&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;&amp;amp; .MuiInputBase-input&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">lineHeight&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;24px&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="s2">&amp;#34;&amp;amp; .MuiInput-underline:before&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">borderBottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`1px solid &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">palette&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">grey&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">300&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">Styles&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Hugo theme improved pagination</title><link>https://til.neilmagee.com/post/hugo-theme-improved-pagination/</link><pubDate>Thu, 18 Jul 2019 17:01:21 +0100</pubDate><guid>https://til.neilmagee.com/post/hugo-theme-improved-pagination/</guid><description>&lt;p>Today I learned how to do numbered pagination in my &lt;a href="https://github.com/freemagee/comfortable-basic">Hugo theme&lt;/a> using &lt;code>golang&lt;/code>. This was a bit harder than I expected as I am no expert on programming with &lt;code>golang&lt;/code>. But once I remembered that &lt;code>golang&lt;/code> still follows the same programming conventions that other languages do, even though the syntax is different.&lt;/p>
&lt;p>After the posts in my theme, there is a simple navigation area at the bottom. At the moment it looks like this:&lt;/p>
&lt;figure>
&lt;img src="https://til.neilmagee.com/images/improved-pagination/current-pagination.png"
alt="An image of my Hugo themes current pagination"loading="lazy"
/> &lt;figcaption>
&lt;h4>My current pagination&lt;/h4>
&lt;/figcaption>
&lt;/figure></description></item><item><title>Using web fonts in email campaigns</title><link>https://til.neilmagee.com/post/using-web-fonts-in-email-campaigns/</link><pubDate>Thu, 27 Jun 2019 16:01:37 +0100</pubDate><guid>https://til.neilmagee.com/post/using-web-fonts-in-email-campaigns/</guid><description>&lt;p>Today I learned to keep following my &lt;em>intuition&lt;/em>.&lt;/p>
&lt;p>&lt;strong>TLDR&lt;/strong> Use &lt;code>woff&lt;/code>, not &lt;code>woff2&lt;/code> for web fonts in email&lt;/p>
&lt;p>I had been asked a question by our art director today about using web fonts in an email campaign that was being designed. The company we are designing for has a corporate identity that specifies certain font families. I had already begun to test this back in March so I had an idea of the state of web font support in email clients.&lt;/p>
&lt;p>Before I answered him more definitively, I wanted to perform a few tests using our email marketing software — Campaign Monitor — to confirm what could be achieved.&lt;/p></description></item><item><title>React Redux is pretty great!</title><link>https://til.neilmagee.com/post/react-redux-is-pretty-great/</link><pubDate>Tue, 25 Jun 2019 10:17:37 +0100</pubDate><guid>https://til.neilmagee.com/post/react-redux-is-pretty-great/</guid><description>&lt;p>Today I learned to really appreciate &lt;a href="https://react-redux.js.org/">React Redux&lt;/a>. I have used &lt;a href="https://redux.js.org/introduction/prior-art#flux">Flux&lt;/a> like patterns only a handful of times. Mainly in Vue using &lt;a href="https://vuex.vuejs.org/">Vuex&lt;/a>. But it&amp;rsquo;s been a while since I last used one.&lt;/p>
&lt;p>I am in the middle of building a prototype App in React and the &lt;em>&amp;ldquo;main&amp;rdquo;&lt;/em> component was becoming unwieldy. It contained all the main state, all the functions that were passed to child components as props and the way things were going, it was about to become responsible for asyncronous data as well. That is too much for one component.&lt;/p></description></item><item><title>Controlled inputs and performance</title><link>https://til.neilmagee.com/post/controlled-inputs-and-performance/</link><pubDate>Tue, 04 Jun 2019 09:48:31 +0100</pubDate><guid>https://til.neilmagee.com/post/controlled-inputs-and-performance/</guid><description>&lt;p>Today I learned about the performance impact of using &lt;a href="https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/">controlled inputs&lt;/a> in React.&lt;/p>
&lt;p>I noticed that once I had multiples of a component I&amp;rsquo;d made on screen &lt;em>(that included text inputs)&lt;/em> the typing performance would begin to lag. It also got exponentially worse for each additional component.&lt;/p>
&lt;h2 id="onchange-vs-onblur">onChange vs onBlur&lt;/h2>
&lt;p>The main difference I tried was changing my event from &lt;code>onChange&lt;/code> to &lt;code>onBlur&lt;/code> (this was based on some &lt;a href="https://stackoverflow.com/a/38914965">Stack Overflow&lt;/a> advice).&lt;/p>
&lt;h3 id="before">Before&lt;/h3>
&lt;figure>
&lt;img src="https://til.neilmagee.com/images/controlled-inputs-performance/bad.gif"
alt="Animated gif showing poor input performance"loading="lazy"
/> &lt;figcaption>
&lt;h4>Laggy input performance&lt;/h4>
&lt;/figcaption>
&lt;/figure></description></item><item><title>Material UI theming and style overrides - Part 3</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-3/</link><pubDate>Fri, 31 May 2019 14:54:14 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-3/</guid><description>&lt;p>Today I learned more about sharing styles across React components. Although CSS-in-JS is new to me, it is pretty easy to pick up (&lt;em>Although I have not formed a final opinion on it yet&amp;hellip;&lt;/em>). I think Material UI uses &lt;a href="https://github.com/cssinjs/react-jss">React JSS&lt;/a> under the hood, so a style can be written as an object:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">makeStyles&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@material-ui/styles&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">useStyles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">makeStyles&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">root&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">backgroundColor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;red&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">MyComponent&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">classes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useStyles&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span> &lt;span class="nx">className&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">classes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">root&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="refactor-to-be-more-dry">Refactor to be more DRY&lt;/h2>
&lt;p>I had three components that were pretty similar to each other, with enough unique parts to keep them seperate. But they all had a style object in them. I could see the &lt;strong>style object was about 90% duplicated&lt;/strong> between each component. So after using a diff tool to see what the differences were, I extracted the shared styles out into a new file called &lt;code>Styles.js&lt;/code>. That looks a little like this:&lt;/p></description></item><item><title>Material UI theming and style overrides - Part 2</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-2/</link><pubDate>Tue, 28 May 2019 11:02:49 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-2/</guid><description>&lt;p>Today I learned that my previous attempt at theming a &lt;em>Material UI&lt;/em> component was not right. I thought the &lt;em>default theme&lt;/em> overrides I was providing were also being used in the &lt;em>component style&lt;/em> overrides. But they were not.&lt;/p>
&lt;p>After debugging the theme object in Chrome, I could see that before &lt;code>useStyles()&lt;/code> was called, my theme object was as expected, with my colour set. But the when I stepped into the &lt;code>useStyles()&lt;/code> function and observed the theme object it was using, the colour was not right. I had assumed that the styles argument that &lt;code>makeStyles&lt;/code> took was my &lt;em>global&lt;/em> &lt;code>theme&lt;/code> object. The &lt;code>AppBar&lt;/code> background was yellow, so the theme was working in general, just not for my &lt;em>component style&lt;/em> overrides.&lt;/p>
&lt;p>I put a &lt;a href="https://codesandbox.io/s/fervent-meninsky-hqnlq">CodeSandbox&lt;/a> together to illustrate the differences:&lt;/p></description></item><item><title>Material UI theming and style overrides - Part 1</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-1/</link><pubDate>Fri, 24 May 2019 12:37:01 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-1/</guid><description>&lt;p>Today I learned how to extend the Material UI &lt;a href="https://material-ui.com/customization/themes/">default theme&lt;/a> and retain the default theme settings for my own style overrides.&lt;/p>
&lt;p>This takes a little explaining. The &lt;strong>Theme&lt;/strong> in Material UI is responsible for the higher level styling. It contains settings for the colour palette, typography and other useful helper methods such as &lt;code>theme.spacing()&lt;/code>. &lt;strong>Style overrides&lt;/strong> I would define as fine level style changes of the Material UI components, for example changing the thickness of an underline on a input component.&lt;/p></description></item><item><title>The basics of React Redux</title><link>https://til.neilmagee.com/post/the-basics-of-react-redux/</link><pubDate>Mon, 20 May 2019 16:39:16 +0100</pubDate><guid>https://til.neilmagee.com/post/the-basics-of-react-redux/</guid><description>&lt;p>Today I learned the basics of &lt;a href="https://react-redux.js.org/">React Redux&lt;/a> because the &lt;code>state&lt;/code> requirements of the React app I have been building are now in need of a better solution.&lt;/p>
&lt;p>I am a fairly experienced front-end developer, and I know how to use lots of technologies. But I was struggling with grasping the fundamentals of using React Redux. I have used &lt;a href="https://vuex.vuejs.org/">Vuex&lt;/a> previously, which I picked up pretty quickly and I thought it would be similar. They are similar in concept, but not in execution. I think Vue deserves a lot of credit for their documentation as it is really good.&lt;/p>
&lt;p>What I was looking for was a basic tutorial, the &lt;em>most&lt;/em> basic. But every &amp;ldquo;basic&amp;rdquo; tutorial was how to make a &lt;em>todo&lt;/em> app. But I honestly needed a &lt;em>Hello world&lt;/em>, just to see how the code was wired together. This is from the redux documentation:&lt;/p>
&lt;blockquote>
&lt;p>Don&amp;rsquo;t be fooled by all the fancy talk about reducers, middleware, store enhancers—Redux is incredibly simple. If you&amp;rsquo;ve ever built a Flux application, you will feel right at home. If you&amp;rsquo;re new to Flux, it&amp;rsquo;s easy too!&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://redux-docs.netlify.com/basics/basic-tutorial">Source&lt;/a>&lt;/p>
&lt;p>I would agree in hindsight that it is relatively easy, but the path to that knowledge is shrouded in fog. It was time to find alternative education!&lt;/p></description></item><item><title>Front-end test drive: Material UI</title><link>https://til.neilmagee.com/post/front-end-test-drive-material-ui/</link><pubDate>Thu, 16 May 2019 16:37:08 +0100</pubDate><guid>https://til.neilmagee.com/post/front-end-test-drive-material-ui/</guid><description>&lt;p>Today I learned how to apply style overrides to &lt;a href="https://next.material-ui.com">Material UI&lt;/a> (v4.0.0-beat.2), a React front-end component library.&lt;/p>
&lt;p>The company I work for is looking to develop some new tools, which we want to get to a prototype stage as soon as possible. We have decided to use React as part of our tech stack (&lt;em>which is good&lt;/em>), and knowing that the UI that these tools require is going to need a lot of UI components, I started to look at front-end component libraries (mainly Material UI and Ant Design).&lt;/p>
&lt;p>I did a analysis of the types of UI components we need to build our tool - tooltips, various inputs, switch style buttons, modals, dialogs &amp;amp; drop downs. I wanted to make a test &amp;lsquo;App&amp;rsquo; that would combine various components from the library. My main goal was to see how this library was going to be to work with.&lt;/p></description></item><item><title>Authentication vs. Authorisation</title><link>https://til.neilmagee.com/post/authentication-vs.-authorisation/</link><pubDate>Tue, 09 Apr 2019 12:26:24 +0100</pubDate><guid>https://til.neilmagee.com/post/authentication-vs.-authorisation/</guid><description>&lt;p>Today I learned more about the distinction between &lt;em>authentication&lt;/em> and &lt;em>authorisation&lt;/em>. I have probably thought of those terms as being synonymous with eachother and fulfilling the same needs. But I was wrong.&lt;/p></description></item><item><title>Resolve eslint and prettier conflicts</title><link>https://til.neilmagee.com/post/resolve-eslint-and-prettier-conflicts/</link><pubDate>Tue, 12 Feb 2019 10:07:40 +0000</pubDate><guid>https://til.neilmagee.com/post/resolve-eslint-and-prettier-conflicts/</guid><description>&lt;p>Today I learned about a handy utility called &lt;code>eslint-config-prettier-check&lt;/code> which I saw referenced in this GitHub &lt;a href="https://github.com/prettier/prettier/issues/2609">issue&lt;/a>.&lt;/p>
&lt;p>I was editing a &lt;code>.vue&lt;/code> component in Visual Studio Code. I had a code section with red underlines, generally indicating that eslint was not happy with something. I could see it was a formatting issue, so I used &lt;code>eslint --fix&lt;/code> to solve the issue and re-format the code. But then that triggered a new lint problem where &lt;em>Prettier&lt;/em> was now unhappy with how &lt;em>eslint&lt;/em> had formatted the code. The difference between the two is small, and involves a couple of indented spaces. See the images below for both examples.&lt;/p>
&lt;figure>
&lt;img src="https://til.neilmagee.com/images/eslint-and-prettier-conflicts/eslint-formatted.png"
alt="Example of code formatted with eslint"loading="lazy"
/> &lt;figcaption>
&lt;h4>eslint Formatted&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="https://til.neilmagee.com/images/eslint-and-prettier-conflicts/prettier-formatted.png"
alt="Example of code formatted with Prettier"loading="lazy"
/> &lt;figcaption>
&lt;h4>Prettier Formatted&lt;/h4>
&lt;/figcaption>
&lt;/figure></description></item><item><title>Apache virtual host redirection with ssl</title><link>https://til.neilmagee.com/post/apache-virtual-host-redirection-with-ssl/</link><pubDate>Mon, 04 Feb 2019 14:54:05 +0000</pubDate><guid>https://til.neilmagee.com/post/apache-virtual-host-redirection-with-ssl/</guid><description>&lt;p>Today I learned more about Apache virtual hosting and redirection. I decided to change my server host to &lt;a href="https://www.digitalocean.com">Digital Ocean&lt;/a> a few months ago. There was nothing wrong with my then host, it was a shared web host, which I mainly used to access and manage with cPanel.&lt;/p>
&lt;p>During my day job I have been administering a CentOS based virtual server hosted by Rackspace and have become more comfortable with using a SSH to manage it. &lt;em>Comfortable&lt;/em>, but still with lots of Googling and Stack Overflowing.&lt;/p>
&lt;p>So I thought I would challenge myself a bit and make the jump to Digital Ocean and take more control of my own server. I wanted to be able to make any sites I run use SSL via &lt;a href="https://letsencrypt.org/">Let&amp;rsquo;s Encrypt&lt;/a>. This was not possible with my old host, as they had a more traditional &amp;ldquo;buy a certificate&amp;rdquo; business model and I could not administer the server to install Certbot.&lt;/p>
&lt;p>After setting this new server up and getting &lt;strong>neilmagee.com&lt;/strong> served on port 80, I used Let&amp;rsquo;s Encrypt to generate some certs for the &lt;code>www&lt;/code> and &lt;code>non-www&lt;/code> versions of the sites (&lt;em>Why? See &lt;a href="#notes">notes&lt;/a> at end of article&lt;/em>). This worked well, and I could now access &lt;a href="https://neilmagee.com">https://neilmagee.com&lt;/a> and &lt;a href="https://www.neilmagee.com">https://www.neilmagee.com&lt;/a>. My goal was to redirect all traffic (http{s} and www) to my canonical domain, &lt;a href="https://neilmagee.com">https://neilmagee.com&lt;/a>.&lt;/p></description></item><item><title>Get Jest working with Babel 7</title><link>https://til.neilmagee.com/post/get-jest-working-with-babel-7/</link><pubDate>Tue, 22 Jan 2019 09:32:32 +0000</pubDate><guid>https://til.neilmagee.com/post/get-jest-working-with-babel-7/</guid><description>&lt;p>Today I learned how to get &lt;a href="https://jestjs.io">Jest&lt;/a> to work with Babel 7. Often development involves tool configuration. I have lost many hours to this over the years. Something changes a version number and suddenly you are hunting through Stack Overflow and GitHub with a good idea of the problem, but lacking the &lt;code>magic inscriptions&lt;/code> to solve it. Or there are version conflicts. Today&amp;rsquo;s example is the latter.&lt;/p>
&lt;p>I was writing a small tool for a maths problem, &lt;a href="https://github.com/freemagee/number-difference-table">Number difference table&lt;/a>, and I thought it would benefit from having some unit tests written for it. I wanted to test some of the calculations and using the UI over and over, or console logging had become tedious.&lt;/p>
&lt;p>So I chose to use &lt;a href="https://jestjs.io">Jest&lt;/a> and installed it.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">yarn add -D jest
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Simplify React components</title><link>https://til.neilmagee.com/post/simplify-react-components/</link><pubDate>Wed, 09 Jan 2019 17:04:41 +0000</pubDate><guid>https://til.neilmagee.com/post/simplify-react-components/</guid><description>&lt;p>Today I learned a bit more about why setting props against state is considered an anti-pattern. After my &lt;a href="https://til.neilmagee.com/post/react-update-state-from-props/">previous article&lt;/a>, I was not happy with the component. It still felt like &lt;code>getDerivedStateFromProps&lt;/code> was a hack rather than a maintainable fix. Plus in using the component, I was still triggering bugs that were quite situational.&lt;/p>
&lt;p>I read more on &lt;a href="https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recap">the react blog&lt;/a> and the recap really nailed what I needed to do.&lt;/p>
&lt;blockquote>
&lt;p>For example, rather than a child accepting a “committed” props.value and tracking a “draft” state.value, have the parent manage both state.draftValue and state.committedValue and control the child’s value directly.&lt;/p>
&lt;/blockquote>
&lt;p>This accurately described a process, to make my component simpler (I think it qualifies as a controlled component now), that would remove side effects. So I set out to remove state from this component and make it&amp;rsquo;s parent responsible for passing in the correct data as props.&lt;/p></description></item><item><title>Update state from props in React</title><link>https://til.neilmagee.com/post/update-state-from-props-in-react/</link><pubDate>Tue, 08 Jan 2019 11:11:05 +0000</pubDate><guid>https://til.neilmagee.com/post/update-state-from-props-in-react/</guid><description>&lt;p>Today I learned how to use a new(ish) React lifecycle hook called &lt;code>getDerivedStateFromProps&lt;/code> (&lt;a href="https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props">link&lt;/a>). I have struggled a little bit with form components that allow you to edit data. In my example below it is &amp;ldquo;user&amp;rdquo; data, but in reality this could affect all forms with any data in React.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>The reason for the struggle is a slight conflict for the one true source of the data for the form. When the &amp;ldquo;user&amp;rdquo; is edited, and the &lt;strong>user form component&lt;/strong> is used, data is fed into it via props from it&amp;rsquo;s &lt;em>parent component&lt;/em>. So the Employer and Job title current values can appear in their relevant inputs.&lt;/p>
&lt;p>That would be ok if that data was static, but the data is not and it needs to be editable. So the props are copied into the &lt;strong>user form component&lt;/strong> state. And this state is used as the value of the relevant inputs. That allows the inputs to receive new data, which triggers off a chain of events.&lt;/p>
&lt;p>The new data is processed via a &lt;code>handleChange&lt;/code> event in the &lt;strong>user form component&lt;/strong>. Two things happen, it is added to the current state and also passed to a &lt;em>parent component&lt;/em> for other actions to happen. When that &lt;em>parent component&lt;/em> is done, it sends that data back to this &lt;strong>user form component&lt;/strong> as props and the cycle can continue.&lt;/p></description></item><item><title>Undo a Git commit and redo</title><link>https://til.neilmagee.com/post/undo-a-git-commit-and-redo/</link><pubDate>Thu, 03 Jan 2019 14:52:45 +0000</pubDate><guid>https://til.neilmagee.com/post/undo-a-git-commit-and-redo/</guid><description>&lt;p>Today I learned how to sort out a &lt;strong>local&lt;/strong> mistake in Git&lt;!-- raw HTML omitted -->1&lt;!-- raw HTML omitted -->:&lt;/p>
&lt;pre>&lt;code>$ git commit -m &amp;quot;Something terribly misguided&amp;quot; # (1)
$ git reset HEAD~ # (2)
&amp;lt;&amp;lt; edit files as necessary &amp;gt;&amp;gt; # (3)
$ git add ... # (4)
$ git commit -c ORIG_HEAD # (5)
&lt;/code>&lt;/pre>&lt;ol>
&lt;li>This is what you want to undo&lt;/li>
&lt;li>This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they&amp;rsquo;ll appear as &amp;ldquo;Changes not staged for commit&amp;rdquo; in &lt;code>git status&lt;/code>, and you&amp;rsquo;ll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->, you could use &lt;code>git reset --soft HEAD~&lt;/code> instead, which is like &lt;code>git reset HEAD~&lt;/code> (where &lt;code>HEAD~&lt;/code> is the same as &lt;code>HEAD~1&lt;/code>) but leaves your existing changes staged.&lt;/li>
&lt;li>Make corrections to working tree files.&lt;/li>
&lt;li>git add anything that you want to include in your new commit.&lt;/li>
&lt;li>Commit the changes, reusing the old commit message. reset copied the old head to &lt;code>.git/ORIG_HEAD&lt;/code>; &lt;code>commit&lt;/code> with &lt;code>-c ORIG_HEAD&lt;/code> will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the &lt;code>-C&lt;/code> option.&lt;/li>
&lt;/ol></description></item><item><title>PHP The right way</title><link>https://til.neilmagee.com/post/php-the-right-way/</link><pubDate>Wed, 21 Nov 2018 16:28:33 +0000</pubDate><guid>https://til.neilmagee.com/post/php-the-right-way/</guid><description>&lt;p>Today I learned about &lt;a href="https://phptherightway.com/">PHP The right way&lt;/a>. Whilst I am a front-end developer who focuses on JavaScript, CSS, HTML, UX, design etc etc, I am still responsible for writing PHP every now and again. That can be Wordpress themes or plugins, login systems and in the past I have written basic e-commerce. PHP is still my server side language of choice for my own projects.&lt;/p>
&lt;p>I have made effort in my JavaScript to try to follow some practices - ESLint, Prettier for code formatting, use Babel, learn design patterns and more. But my PHP code style has always remained pretty procedural. Import some classes, set some variables, handle form input, and then write to a view using a template language (if possible). There is always inevitably a bunch of &lt;code>if/else&lt;/code> statements. I never really feel like I am writing as clean code as my JavaScript and that my PHP knowledge is probably a bit dated.&lt;/p></description></item><item><title>Tachyons Components</title><link>https://til.neilmagee.com/post/tachyons-components/</link><pubDate>Mon, 19 Nov 2018 14:54:11 +0000</pubDate><guid>https://til.neilmagee.com/post/tachyons-components/</guid><description>&lt;p>Today I learned a bit more about using &lt;a href="http://tachyons.io/">Tachyons&lt;/a> to make components. I read about Tachyons a long time ago and had a pretty common reaction to it which was to dismiss it outright. I come from a background of having learnt CSS when semantics were being preached. Carefully named classes were chosen for their meaning, and keeping styles out of HTML was important.&lt;/p>
&lt;p>But my views have matured over time as I started to use BEM for CSS naming and realised the limitations of creating classes and how rubbish humans are at naming things. Especially when maintaining larger systems. I read &lt;a href="https://hackernoon.com/full-re-write-with-tachyons-and-functional-css-a-case-study-part-1-635ccb5fb00b">articles&lt;/a> about &lt;a href="https://adamwathan.me/css-utility-classes-and-separation-of-concerns/">utility classes&lt;/a> and slowly I began to agree with their perspective.&lt;/p></description></item><item><title>Editor config is still hard</title><link>https://til.neilmagee.com/post/editor-config-is-still-hard/</link><pubDate>Wed, 14 Nov 2018 11:16:00 +0000</pubDate><guid>https://til.neilmagee.com/post/editor-config-is-still-hard/</guid><description>&lt;p>Today I learned that configuring your code editor to lint and format code in a predictable way is still hard.&lt;/p>
&lt;p>I use two editors frequently - Sublime Text and VS Code. Both are great. Both have plugins and their own settings. Today I was trying to update my environment for a Vue project in VS Code. I wanted the &lt;code>.vue&lt;/code> files to be linted with ESLint, and for Prettier to handle the formatting. I was concentrating on how multiple attributes per line were being formatted on the &lt;code>&amp;lt;template&amp;gt;&lt;/code> part.&lt;/p></description></item><item><title>React Prevent Re-renders</title><link>https://til.neilmagee.com/post/react-prevent-re-renders/</link><pubDate>Wed, 07 Nov 2018 09:26:33 +0000</pubDate><guid>https://til.neilmagee.com/post/react-prevent-re-renders/</guid><description>&lt;p>Today I learned how to prevent React from unnecessarily re-rendering a component:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">shouldComponentUpdate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nextProps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Compare the props with one another
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">actions&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="nx">nextProps&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">actions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I was trying to use a loop to sort some items prior to rendering them in a component. During the debug step I kept seeing the loop run twice, when I was only expecting it to run once.&lt;/p></description></item><item><title>React Conditional Rendering</title><link>https://til.neilmagee.com/post/react-conditional-rendering/</link><pubDate>Mon, 05 Nov 2018 17:13:02 +0000</pubDate><guid>https://til.neilmagee.com/post/react-conditional-rendering/</guid><description>&lt;p>Today I learned how to conditionally render a React component. I was using CSS to show and hide different components in reaction to the App&amp;rsquo;s state. Setting a component to be &lt;code>display: none;&lt;/code> or control it&amp;rsquo;s opacity. The problem was that React was throwing up some warnings that were coming from &amp;ldquo;invisible&amp;rdquo; components, that were receiving props before they were really meant to. This is probably representative of a deeper problem in my App structure.&lt;/p>
&lt;p>Having finally read the &lt;a href="https://reactjs.org/docs/conditional-rendering.html">conditional rendering&lt;/a> page, I have chosen the &amp;ldquo;Inline If with Logical &amp;amp;&amp;amp; Operator&amp;rdquo; pattern for my App. Below is a stripped down example:&lt;/p>
&lt;h2 id="parent-app">Parent App&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">Component&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;react&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">MyComponent&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;./components/MyComponent.jsx&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">class&lt;/span> &lt;span class="nx">App&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">componentIsActive&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">setComponentActive&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Something else could trigger this
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setState&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">componentIsActive&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="c1">// The component is passed a prop from the state
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">MyComponent&lt;/span>
&lt;span class="nx">active&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">componentIsActive&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="o">/&amp;gt;&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">App&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>React With Debounce</title><link>https://til.neilmagee.com/post/react-with-debounce/</link><pubDate>Wed, 24 Oct 2018 20:10:38 +0100</pubDate><guid>https://til.neilmagee.com/post/react-with-debounce/</guid><description>&lt;p>Today I learned how to debounce inputs in a &lt;a href="https://reactjs.org/">React&lt;/a> component. This is something I have done in many other places, in plain JavaScript, in jQuery, in AngularJs and in VueJs. Whilst the concept is the same - have a user input some data (text, date, email, whatever), wait a short amount of time so that the user has finished typing and then do something. The idea being the &amp;ldquo;do something&amp;rdquo; does not happen whilst the user is still adding their data.&lt;/p></description></item><item><title>Hugo Variables</title><link>https://til.neilmagee.com/post/hugo-variables/</link><pubDate>Thu, 11 Oct 2018 12:39:12 +0100</pubDate><guid>https://til.neilmagee.com/post/hugo-variables/</guid><description>&lt;p>Today I learned that I do not know how to concatenate strings using &lt;code>golang&lt;/code>.&lt;/p>
&lt;p>My &lt;a href="https://github.com/freemagee/comfortable-basic">Hugo theme&lt;/a> has an &amp;lsquo;about&amp;rsquo; page, which is supposed to have a conditional css class applied to the navigation when you are actually on that page. The default class is &lt;code>site-header__nav-item&lt;/code> and that is meant to become &lt;code>site-header__nav-item active&lt;/code> when visiting the &amp;lsquo;about&amp;rsquo; page. This was not happening, so I have refactored the code a little and fixed the issue.&lt;/p>
&lt;h3 id="the-old-code">The old code&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">header&lt;/span> &lt;span class="nx">class&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;site-header&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">section&lt;/span> &lt;span class="nx">class&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;site-header__ident&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="nx">href&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;{{ .Site.BaseURL }}&amp;#34;&lt;/span> &lt;span class="nx">class&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;site-header__link&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;{{&lt;/span>&lt;span class="o">-&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">Site&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Title&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="p">}}&amp;lt;&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">section&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">nav&lt;/span> &lt;span class="nx">class&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;site-header__nav&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{{&lt;/span> &lt;span class="nx">with&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">Site&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GetPage&lt;/span> &lt;span class="s">&amp;#34;about&amp;#34;&lt;/span> &lt;span class="p">}}&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="nx">href&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;{{ .Site.BaseURL }}about/&amp;#34;&lt;/span> &lt;span class="nx">class&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;site-header__nav-item {{ if eq .URL &amp;#34;&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">about&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="s">&amp;#34;}}active{{ end }}&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">About&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{{&lt;/span> &lt;span class="nx">end&lt;/span> &lt;span class="p">}}&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">nav&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">header&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Hugo deploy</title><link>https://til.neilmagee.com/post/hugo-deploy/</link><pubDate>Wed, 10 Oct 2018 16:31:28 +0100</pubDate><guid>https://til.neilmagee.com/post/hugo-deploy/</guid><description>&lt;p>Today I had a lesson in &lt;a href="https://en.wikipedia.org/wiki/RTFM">RTFM&lt;/a>. I noticed my Hugo &lt;code>public/&lt;/code> folder had a bunch of orphaned content from a previous deploy that used dummy content. There is a clear reference to this in the &lt;a href="https://gohugo.io/getting-started/usage/#deploy-your-website">Hugo documentation&lt;/a>.&lt;/p></description></item><item><title>Hugo template logic</title><link>https://til.neilmagee.com/post/hugo-template-logic/</link><pubDate>Mon, 08 Oct 2018 14:54:52 +0100</pubDate><guid>https://til.neilmagee.com/post/hugo-template-logic/</guid><description>&lt;p>Today I made some improvements to the &lt;a href="https://github.com/freemagee/comfortable-basic">Hugo theme&lt;/a> I created for this site. Adding some conditional statements to the templates to cater for various scenarios that don&amp;rsquo;t fit how I intend to use the theme.&lt;/p>
&lt;p>Although the theme is limited in scope, I want to eventually release it on &lt;a href="https://themes.gohugo.io/">Hugo Themes&lt;/a> and allow it to be flexible enough for others to use.&lt;/p>
&lt;h2 id="deal-with-no-posts">Deal with no posts&lt;/h2>
&lt;p>On the &lt;code>layouts/partials/pagination.html&lt;/code> template, it has been wrapped in&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="p">{{&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">ne&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">TotalPages&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;span class="c1">// Content
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">{{&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>