<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on TIL</title>
    <link>https://til.neilmagee.com/categories/development/</link>
    <description>Recent content in Development on TIL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 05 Nov 2018 17:13:02 +0000</lastBuildDate>
    
	<atom:link href="https://til.neilmagee.com/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>React Conditional Rendering</title>
      <link>https://til.neilmagee.com/posts/react-conditional-rendering/</link>
      <pubDate>Mon, 05 Nov 2018 17:13:02 +0000</pubDate>
      
      <guid>https://til.neilmagee.com/posts/react-conditional-rendering/</guid>
      <description>&lt;p&gt;Today I learned how to conditionally render a React component. I was using CSS to show and hide different components in reaction to the App&amp;rsquo;s state. Setting a component to be &lt;code&gt;display: none;&lt;/code&gt; or control it&amp;rsquo;s opacity. The problem was that React was throwing up some warnings that were coming from &amp;ldquo;invisible&amp;rdquo; components, that were receiving props before they were really meant to. This is probably representative of a deeper problem in my App structure.&lt;/p&gt;

&lt;p&gt;Having finally read the &lt;a href=&#34;https://reactjs.org/docs/conditional-rendering.html&#34;&gt;conditional rendering&lt;/a&gt; page, I have chosen the &amp;ldquo;Inline If with Logical &amp;amp;&amp;amp; Operator&amp;rdquo; pattern for my App. Below is a stripped down example:&lt;/p&gt;

&lt;h2 id=&#34;parent-app&#34;&gt;Parent App&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, {Component} from &amp;quot;react&amp;quot;;
import MyComponent from &amp;quot;./components/MyComponent.jsx&amp;quot;;

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      componentIsActive: false
    };
  }
  setComponentActive() {
    // Something else could trigger this
    this.setState({
        componentIsActive: true
    });
  }
  render() {
    return (
      // The component is passed a prop from the state
      &amp;lt;MyComponent
        active={this.state.componentIsActive}
      /&amp;gt;
    );
  }
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React With Debounce</title>
      <link>https://til.neilmagee.com/posts/react-with-debounce/</link>
      <pubDate>Wed, 24 Oct 2018 20:10:38 +0100</pubDate>
      
      <guid>https://til.neilmagee.com/posts/react-with-debounce/</guid>
      <description>&lt;p&gt;Today I learned how to debounce inputs in a &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; component. This is something I have done in many other places, in plain JavaScript, in jQuery, in AngularJs and in VueJs. Whilst the concept is the same - have a user input some data (text, date, email, whatever), wait a short amount of time so that the user has finished typing and then do something. The idea being the &amp;ldquo;do something&amp;rdquo; does not happen whilst the user is still adding their data.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo Variables</title>
      <link>https://til.neilmagee.com/posts/hugo-variables/</link>
      <pubDate>Thu, 11 Oct 2018 12:39:12 +0100</pubDate>
      
      <guid>https://til.neilmagee.com/posts/hugo-variables/</guid>
      <description>&lt;p&gt;Today I learned that I do not know how to concatenate strings using &lt;code&gt;golang&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&#34;https://github.com/freemagee/comfortable-basic&#34;&gt;Hugo theme&lt;/a&gt; has an &amp;lsquo;about&amp;rsquo; page, which is supposed to have a conditional css class applied to the navigation when you are actually on that page. The default class is &lt;code&gt;site-header__nav-item&lt;/code&gt; and that is meant to become &lt;code&gt;site-header__nav-item active&lt;/code&gt; when visiting the &amp;lsquo;about&amp;rsquo; page. This was not happening, so I have refactored the code a little and fixed the issue.&lt;/p&gt;

&lt;h3 id=&#34;the-old-code&#34;&gt;The old code&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;&amp;lt;header class=&amp;quot;site-header&amp;quot;&amp;gt;
  &amp;lt;section class=&amp;quot;site-header__ident&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}&amp;quot; class=&amp;quot;site-header__link&amp;quot;&amp;gt;{{- .Site.Title -}}&amp;lt;/a&amp;gt;
  &amp;lt;/section&amp;gt;
  &amp;lt;nav class=&amp;quot;site-header__nav&amp;quot;&amp;gt;
    {{ with .Site.GetPage &amp;quot;about&amp;quot; }}
    &amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}about/&amp;quot; class=&amp;quot;site-header__nav-item {{ if eq .URL &amp;quot;/about/&amp;quot;}}active{{ end }}&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;
    {{ end }}
  &amp;lt;/nav&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo deploy</title>
      <link>https://til.neilmagee.com/posts/hugo-deploy/</link>
      <pubDate>Wed, 10 Oct 2018 16:31:28 +0100</pubDate>
      
      <guid>https://til.neilmagee.com/posts/hugo-deploy/</guid>
      <description>&lt;p&gt;Today I had a lesson in &lt;a href=&#34;https://en.wikipedia.org/wiki/RTFM&#34;&gt;RTFM&lt;/a&gt;. I noticed my Hugo &lt;code&gt;public/&lt;/code&gt; folder had a bunch of orphaned content from a previous deploy that used dummy content. There is a clear reference to this in the &lt;a href=&#34;https://gohugo.io/getting-started/usage/#deploy-your-website&#34;&gt;Hugo documentation&lt;/a&gt;.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo template logic</title>
      <link>https://til.neilmagee.com/posts/hugo-templates/</link>
      <pubDate>Mon, 08 Oct 2018 14:54:52 +0100</pubDate>
      
      <guid>https://til.neilmagee.com/posts/hugo-templates/</guid>
      <description>&lt;p&gt;Today I made some improvements to the &lt;a href=&#34;https://github.com/freemagee/comfortable-basic&#34;&gt;Hugo theme&lt;/a&gt; I created for this site. Adding some conditional statements to the templates to cater for various scenarios that don&amp;rsquo;t fit how I intend to use the theme.&lt;/p&gt;

&lt;p&gt;Although the theme is limited in scope, I want to eventually release it on &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo Themes&lt;/a&gt; and allow it to be flexible enough for others to use.&lt;/p&gt;

&lt;h2 id=&#34;deal-with-no-posts&#34;&gt;Deal with no posts&lt;/h2&gt;

&lt;p&gt;On the &lt;code&gt;layouts/partials/pagination.html&lt;/code&gt; template, it has been wrapped in&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;{{ if ne .TotalPages 0}}
  // Content
{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>