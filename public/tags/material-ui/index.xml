<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>material-ui on TIL</title><link>https://til.neilmagee.com/tags/material-ui/</link><description>Recent content in material-ui on TIL</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 05 Aug 2019 11:54:29 +0100</lastBuildDate><atom:link href="https://til.neilmagee.com/tags/material-ui/index.xml" rel="self" type="application/rss+xml"/><item><title>Material UI theming and style overrides - Part 5</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-pt5/</link><pubDate>Mon, 05 Aug 2019 11:54:29 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-pt5/</guid><description>&lt;p&gt;Today I learned that sometimes a &lt;strong&gt;refactor&lt;/strong&gt; is not always better, just &lt;em&gt;different&lt;/em&gt;. I followed through with my plan to split my styles out into individual modules:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Example styles module &#39;body.js&#39;
import CustomTheme from &amp;quot;../../Theme&amp;quot;;
export default {
formBuilder: {
paddingBottom: CustomTheme.spacing(8)
},
formBuilderContainer: {
maxWidth: &amp;quot;770px&amp;quot;,
padding: 0
}
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That module sits in a &lt;code&gt;/Styles&lt;/code&gt; folder, at the same level as my container component, and is exposed via an &lt;code&gt;index.js&lt;/code&gt; file like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export { default as body } from &amp;quot;./body&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>Material UI theming and style overrides - Part 4</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-pt4/</link><pubDate>Fri, 02 Aug 2019 14:49:47 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-pt4/</guid><description>&lt;p&gt;Today I learned I still don&amp;rsquo;t have a good answer when it comes to managing &lt;strong&gt;CSS-in-JS&lt;/strong&gt;. &lt;a href=&#34;https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-pt3/&#34;&gt;Last time&lt;/a&gt; I discussed this topic I had decided to make a single &lt;code&gt;Styles.js&lt;/code&gt; object that contained style overrides to Material UI. I consolidated all my components styles into that &lt;code&gt;Styles.js&lt;/code&gt; file. Abbreviated example below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import CustomTheme from &amp;quot;../Theme&amp;quot;;
const Styles = {
formPreviewContainer: {
maxWidth: &amp;quot;770px&amp;quot;,
paddingTop: CustomTheme.spacing(8),
paddingBottom: CustomTheme.spacing(8)
},
formHeader: {
position: &amp;quot;relative&amp;quot;,
paddingTop: CustomTheme.spacing(4),
paddingBottom: CustomTheme.spacing(4),
paddingLeft: CustomTheme.spacing(4),
paddingRight: CustomTheme.spacing(8),
marginBottom: CustomTheme.spacing(4),
backgroundColor: CustomTheme.palette.primary.main
},
// ... other styles omitted for brevity ...
textInput: {
&amp;quot;&amp;amp; .MuiInput-underline:before&amp;quot;: {
borderBottom: `1px solid ${CustomTheme.palette.grey[300]}`
},
[CustomTheme.breakpoints.down(&amp;quot;sm&amp;quot;)]: {
width: &amp;quot;100%&amp;quot;
},
[CustomTheme.breakpoints.up(&amp;quot;md&amp;quot;)]: {
width: &amp;quot;50%&amp;quot;
}
},
textArea: {
width: &amp;quot;100%&amp;quot;,
&amp;quot;&amp;amp; .MuiInputBase-input&amp;quot;: {
lineHeight: &amp;quot;24px&amp;quot;
},
&amp;quot;&amp;amp; .MuiInput-underline:before&amp;quot;: {
borderBottom: `1px solid ${CustomTheme.palette.grey[300]}`
},
}
};
export default Styles;
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>Material UI theming and style overrides - Part 3</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-pt3/</link><pubDate>Fri, 31 May 2019 14:54:14 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-pt3/</guid><description>&lt;p&gt;Today I learned more about sharing styles across React components. Although CSS-in-JS is new to me, it is pretty easy to pick up (&lt;em&gt;Although I have not formed a final opinion on it yet&amp;hellip;&lt;/em&gt;). I think Material UI uses &lt;a href=&#34;https://github.com/cssinjs/react-jss&#34;&gt;React JSS&lt;/a&gt; under the hood, so a style can be written as an object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;;
import { makeStyles } from &#39;@material-ui/styles&#39;;
const useStyles = makeStyles({
root: {
backgroundColor: &#39;red&#39;,
},
});
export default function MyComponent() {
const classes = useStyles();
return &amp;lt;div className={classes.root} /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;refactor-to-be-more-dry&#34;&gt;Refactor to be more DRY&lt;/h2&gt;
&lt;p&gt;I had three components that were pretty similar to each other, with enough unique parts to keep them seperate. But they all had a style object in them. I could see the &lt;strong&gt;style object was about 90% duplicated&lt;/strong&gt; between each component. So after using a diff tool to see what the differences were, I extracted the shared styles out into a new file called &lt;code&gt;Styles.js&lt;/code&gt;. That looks a little like this:&lt;/p&gt;</description></item><item><title>Material UI theming and style overrides - Part 2</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-pt2/</link><pubDate>Tue, 28 May 2019 11:02:49 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-pt2/</guid><description>&lt;p&gt;Today I learned that my previous attempt at theming a &lt;em&gt;Material UI&lt;/em&gt; component was not right. I thought the &lt;em&gt;default theme&lt;/em&gt; overrides I was providing were also being used in the &lt;em&gt;component style&lt;/em&gt; overrides. But they were not.&lt;/p&gt;
&lt;p&gt;After debugging the theme object in Chrome, I could see that before &lt;code&gt;useStyles()&lt;/code&gt; was called, my theme object was as expected, with my colour set. But the when I stepped into the &lt;code&gt;useStyles()&lt;/code&gt; function and observed the theme object it was using, the colour was not right. I had assumed that the styles argument that &lt;code&gt;makeStyles&lt;/code&gt; took was my &lt;em&gt;global&lt;/em&gt; &lt;code&gt;theme&lt;/code&gt; object. The &lt;code&gt;AppBar&lt;/code&gt; background was yellow, so the theme was working in general, just not for my &lt;em&gt;component style&lt;/em&gt; overrides.&lt;/p&gt;
&lt;p&gt;I put a &lt;a href=&#34;https://codesandbox.io/s/fervent-meninsky-hqnlq&#34;&gt;CodeSandbox&lt;/a&gt; together to illustrate the differences:&lt;/p&gt;</description></item><item><title>Material UI theming and style overrides - Part 1</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-pt1/</link><pubDate>Fri, 24 May 2019 12:37:01 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-pt1/</guid><description>&lt;p&gt;Today I learned how to extend the Material UI &lt;a href=&#34;https://material-ui.com/customization/themes/&#34;&gt;default theme&lt;/a&gt; and retain the default theme settings for my own style overrides.&lt;/p&gt;
&lt;p&gt;This takes a little explaining. The &lt;strong&gt;Theme&lt;/strong&gt; in Material UI is responsible for the higher level styling. It contains settings for the colour palette, typography and other useful helper methods such as &lt;code&gt;theme.spacing()&lt;/code&gt;. &lt;strong&gt;Style overrides&lt;/strong&gt; I would define as fine level style changes of the Material UI components, for example changing the thickness of an underline on a input component.&lt;/p&gt;</description></item><item><title>Front-end test drive: Material UI</title><link>https://til.neilmagee.com/post/frontend-test-drive-material-ui/</link><pubDate>Thu, 16 May 2019 16:37:08 +0100</pubDate><guid>https://til.neilmagee.com/post/frontend-test-drive-material-ui/</guid><description>&lt;p&gt;Today I learned how to apply style overrides to &lt;a href=&#34;https://next.material-ui.com&#34;&gt;Material UI&lt;/a&gt; (v4.0.0-beat.2), a React front-end component library.&lt;/p&gt;
&lt;p&gt;The company I work for is looking to develop some new tools, which we want to get to a prototype stage as soon as possible. We have decided to use React as part of our tech stack (&lt;em&gt;which is good&lt;/em&gt;), and knowing that the UI that these tools require is going to need a lot of UI components, I started to look at front-end component libraries (mainly Material UI and Ant Design).&lt;/p&gt;
&lt;p&gt;I did a analysis of the types of UI components we need to build our tool - tooltips, various inputs, switch style buttons, modals, dialogs &amp;amp; drop downs. I wanted to make a test &amp;lsquo;App&amp;rsquo; that would combine various components from the library. My main goal was to see how this library was going to be to work with.&lt;/p&gt;</description></item></channel></rss>