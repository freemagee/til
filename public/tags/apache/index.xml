<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>apache on Front-end web development | Neil Magee</title><link>https://til.neilmagee.com/tags/apache/</link><description>Recent content in apache on Front-end web development | Neil Magee</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 04 Feb 2019 14:54:05 +0000</lastBuildDate><atom:link href="https://til.neilmagee.com/tags/apache/index.xml" rel="self" type="application/rss+xml"/><item><title>Apache virtual host redirection with ssl</title><link>https://til.neilmagee.com/post/apache-virtual-host-redirection-with-ssl/</link><pubDate>Mon, 04 Feb 2019 14:54:05 +0000</pubDate><guid>https://til.neilmagee.com/post/apache-virtual-host-redirection-with-ssl/</guid><description>&lt;p>Today I learned more about Apache virtual hosting and redirection. I decided to change my server host to &lt;a href="https://www.digitalocean.com">Digital Ocean&lt;/a> a few months ago. There was nothing wrong with my then host, it was a shared web host, which I mainly used to access and manage with cPanel.&lt;/p>
&lt;p>During my day job I have been administering a CentOS based virtual server hosted by Rackspace and have become more comfortable with using a SSH to manage it. &lt;em>Comfortable&lt;/em>, but still with lots of Googling and Stack Overflowing.&lt;/p>
&lt;p>So I thought I would challenge myself a bit and make the jump to Digital Ocean and take more control of my own server. I wanted to be able to make any sites I run use SSL via &lt;a href="https://letsencrypt.org/">Let&amp;rsquo;s Encrypt&lt;/a>. This was not possible with my old host, as they had a more traditional &amp;ldquo;buy a certificate&amp;rdquo; business model and I could not administer the server to install Certbot.&lt;/p>
&lt;p>After setting this new server up and getting &lt;strong>neilmagee.com&lt;/strong> served on port 80, I used Let&amp;rsquo;s Encrypt to generate some certs for the &lt;code>www&lt;/code> and &lt;code>non-www&lt;/code> versions of the sites (&lt;em>Why? See &lt;a href="#notes">notes&lt;/a> at end of article&lt;/em>). This worked well, and I could now access &lt;a href="https://neilmagee.com">https://neilmagee.com&lt;/a> and &lt;a href="https://www.neilmagee.com">https://www.neilmagee.com&lt;/a>. My goal was to redirect all traffic (http{s} and www) to my canonical domain, &lt;a href="https://neilmagee.com">https://neilmagee.com&lt;/a>.&lt;/p></description></item></channel></rss>