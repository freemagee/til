<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on TIL</title>
    <link>https://til.neilmagee.com/tags/react/</link>
    <description>Recent content in React on TIL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 07 Nov 2018 09:26:33 +0000</lastBuildDate>
    
	<atom:link href="https://til.neilmagee.com/tags/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>React Prevent Re-renders</title>
      <link>https://til.neilmagee.com/posts/react-prevent-re-renders/</link>
      <pubDate>Wed, 07 Nov 2018 09:26:33 +0000</pubDate>
      
      <guid>https://til.neilmagee.com/posts/react-prevent-re-renders/</guid>
      <description>&lt;p&gt;Today I learned how to prevent React from unnecessarily re-rendering a component:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;shouldComponentUpdate(nextProps) {
  // Compare the props with one another
  if (this.props.actions !== nextProps.actions) {
    return true;
  }

  return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was trying to use a loop to sort some items prior to rendering them in a component. During the debug step I kept seeing the loop run twice, when I was only expecting it to run once.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React Conditional Rendering</title>
      <link>https://til.neilmagee.com/posts/react-conditional-rendering/</link>
      <pubDate>Mon, 05 Nov 2018 17:13:02 +0000</pubDate>
      
      <guid>https://til.neilmagee.com/posts/react-conditional-rendering/</guid>
      <description>&lt;p&gt;Today I learned how to conditionally render a React component. I was using CSS to show and hide different components in reaction to the App&amp;rsquo;s state. Setting a component to be &lt;code&gt;display: none;&lt;/code&gt; or control it&amp;rsquo;s opacity. The problem was that React was throwing up some warnings that were coming from &amp;ldquo;invisible&amp;rdquo; components, that were receiving props before they were really meant to. This is probably representative of a deeper problem in my App structure.&lt;/p&gt;

&lt;p&gt;Having finally read the &lt;a href=&#34;https://reactjs.org/docs/conditional-rendering.html&#34;&gt;conditional rendering&lt;/a&gt; page, I have chosen the &amp;ldquo;Inline If with Logical &amp;amp;&amp;amp; Operator&amp;rdquo; pattern for my App. Below is a stripped down example:&lt;/p&gt;

&lt;h2 id=&#34;parent-app&#34;&gt;Parent App&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, {Component} from &amp;quot;react&amp;quot;;
import MyComponent from &amp;quot;./components/MyComponent.jsx&amp;quot;;

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      componentIsActive: false
    };
  }
  setComponentActive() {
    // Something else could trigger this
    this.setState({
        componentIsActive: true
    });
  }
  render() {
    return (
      // The component is passed a prop from the state
      &amp;lt;MyComponent
        active={this.state.componentIsActive}
      /&amp;gt;
    );
  }
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React With Debounce</title>
      <link>https://til.neilmagee.com/posts/react-with-debounce/</link>
      <pubDate>Wed, 24 Oct 2018 20:10:38 +0100</pubDate>
      
      <guid>https://til.neilmagee.com/posts/react-with-debounce/</guid>
      <description>&lt;p&gt;Today I learned how to debounce inputs in a &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; component. This is something I have done in many other places, in plain JavaScript, in jQuery, in AngularJs and in VueJs. Whilst the concept is the same - have a user input some data (text, date, email, whatever), wait a short amount of time so that the user has finished typing and then do something. The idea being the &amp;ldquo;do something&amp;rdquo; does not happen whilst the user is still adding their data.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>