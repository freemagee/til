<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>react on Front-end web development | Neil Magee</title><link>https://til.neilmagee.com/tags/react/</link><description>Recent content in react on Front-end web development | Neil Magee</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 02 Mar 2020 11:31:54 +0000</lastBuildDate><atom:link href="https://til.neilmagee.com/tags/react/index.xml" rel="self" type="application/rss+xml"/><item><title>React controlled input with debounce</title><link>https://til.neilmagee.com/post/react-controlled-input-with-debounce/</link><pubDate>Mon, 02 Mar 2020 11:31:54 +0000</pubDate><guid>https://til.neilmagee.com/post/react-controlled-input-with-debounce/</guid><description>&lt;p>I previously wrote a post about using &lt;a href="https://til.neilmagee.com/post/react-with-debounce/">Lodash debounce with a React component&lt;/a>. I recently had to use a controlled input, that needed a debounce effect on it. But the difference between this new component and the one in my previous post was this new component was written in a functional way, using React hooks.&lt;/p>
&lt;p>So the scope for this component would be to take an initial value from it&amp;rsquo;s parent, handle changes in state, and then when the user has stopped typing, after a short delay, to lift the state up to the parent so that the input value can trigger something in the parent.&lt;/p>
&lt;h2 id="immediate-problems">Immediate problems&lt;/h2>
&lt;p>After writing the new component to use Lodash debounce, and taking advantage of &lt;code>useEffect&lt;/code> to trigger side effects based on the input value changing I immediately saw a problem. I have increased the debounce &amp;ldquo;delay&amp;rdquo; to two seconds to exaggerate the effect.&lt;/p>
&lt;figure>
&lt;img src="https://til.neilmagee.com/images/react-controlled-input-with-debounce/debounce-fail.gif"
alt="Animated gif showing a debounce not working correctly"loading="lazy"
/> &lt;figcaption>
&lt;h4>Debounce gone wrong!&lt;/h4>
&lt;/figcaption>
&lt;/figure></description></item><item><title>Asynchronous redux - Part 2</title><link>https://til.neilmagee.com/post/asynchronous-redux-part-2/</link><pubDate>Tue, 12 Nov 2019 19:31:41 +0000</pubDate><guid>https://til.neilmagee.com/post/asynchronous-redux-part-2/</guid><description>&lt;p>Following on from my &lt;a href="https://til.neilmagee.com/post/asynchronous-redux-pt1/">previous post&lt;/a>, I am going to show a real example of asynchronous redux. The pattern below is used in many places in the app I am working on. It provides control for what is going to happen when the app needs to request/interact with data from the API.&lt;/p></description></item><item><title>Asynchronous redux - Part 1</title><link>https://til.neilmagee.com/post/asynchronous-redux-part-1/</link><pubDate>Mon, 28 Oct 2019 09:29:17 +0000</pubDate><guid>https://til.neilmagee.com/post/asynchronous-redux-part-1/</guid><description>&lt;p>This is not a traditional &lt;strong>&amp;ldquo;Today I learned&amp;rdquo;&lt;/strong> post. It is more like a &lt;strong>&amp;ldquo;Recently I learned&amp;rdquo;&lt;/strong>. I have been using &lt;a href="https://redux.js.org/">Redux&lt;/a> as a system to control state across an app that has a lot of state. Once you get used to the actionType, action, reducer and selector pattern it really provides a deep level of control.&lt;/p>
&lt;h2 id="state-complexity">State complexity&lt;/h2>
&lt;p>It was not long before the need for complex redux actions became clear when the app required data from APIs. That data needed to be requested, processed and added to the redux store before other components could consume it.&lt;/p>
&lt;p>This lead me to &lt;a href="https://github.com/reduxjs/redux-thunk">Redux Thunk&lt;/a> as a way to define actions that were more complex than simply returning a plain object. Often these actions would need to execute promises. So a need to control the sequence of these actions was becoming a priority for the app.&lt;/p></description></item><item><title>Material UI theming and style overrides - Part 5</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-5/</link><pubDate>Mon, 05 Aug 2019 11:54:29 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-5/</guid><description>&lt;p>Today I learned that sometimes a &lt;strong>refactor&lt;/strong> is not always better, just &lt;em>different&lt;/em>. I followed through with my plan to split my styles out into individual modules:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// Example styles module &amp;#39;body.js&amp;#39;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="nx">CustomTheme&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;../../Theme&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">formBuilder&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">paddingBottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">formBuilderContainer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">maxWidth&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;770px&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">padding&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That module sits in a &lt;code>/Styles&lt;/code> folder, at the same level as my container component, and is exposed via an &lt;code>index.js&lt;/code> file like so:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">export&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">as&lt;/span> &lt;span class="nx">body&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;./body&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Material UI theming and style overrides - Part 4</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-4/</link><pubDate>Fri, 02 Aug 2019 14:49:47 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-4/</guid><description>&lt;p>Today I learned I still don&amp;rsquo;t have a good answer when it comes to managing &lt;strong>CSS-in-JS&lt;/strong>. &lt;a href="https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-pt3/">Last time&lt;/a> I discussed this topic I had decided to make a single &lt;code>Styles.js&lt;/code> object that contained style overrides to Material UI. I consolidated all my components styles into that &lt;code>Styles.js&lt;/code> file. Abbreviated example below:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="nx">CustomTheme&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;../Theme&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Styles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">formPreviewContainer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">maxWidth&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;770px&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">paddingTop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">paddingBottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">formHeader&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">position&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;relative&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">paddingTop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">paddingBottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">paddingLeft&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">paddingRight&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">marginBottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spacing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">backgroundColor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">palette&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">primary&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">main&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="c1">// ... other styles omitted for brevity ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">textInput&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;&amp;amp; .MuiInput-underline:before&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">borderBottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`1px solid &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">palette&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">grey&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">300&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">breakpoints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">down&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sm&amp;#34;&lt;/span>&lt;span class="p">)]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;100%&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">breakpoints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">up&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;md&amp;#34;&lt;/span>&lt;span class="p">)]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;50%&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">textArea&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;100%&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;&amp;amp; .MuiInputBase-input&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">lineHeight&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;24px&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="s2">&amp;#34;&amp;amp; .MuiInput-underline:before&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">borderBottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`1px solid &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">CustomTheme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">palette&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">grey&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">300&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">Styles&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>React Redux is pretty great!</title><link>https://til.neilmagee.com/post/react-redux-is-pretty-great/</link><pubDate>Tue, 25 Jun 2019 10:17:37 +0100</pubDate><guid>https://til.neilmagee.com/post/react-redux-is-pretty-great/</guid><description>&lt;p>Today I learned to really appreciate &lt;a href="https://react-redux.js.org/">React Redux&lt;/a>. I have used &lt;a href="https://redux.js.org/introduction/prior-art#flux">Flux&lt;/a> like patterns only a handful of times. Mainly in Vue using &lt;a href="https://vuex.vuejs.org/">Vuex&lt;/a>. But it&amp;rsquo;s been a while since I last used one.&lt;/p>
&lt;p>I am in the middle of building a prototype App in React and the &lt;em>&amp;ldquo;main&amp;rdquo;&lt;/em> component was becoming unwieldy. It contained all the main state, all the functions that were passed to child components as props and the way things were going, it was about to become responsible for asyncronous data as well. That is too much for one component.&lt;/p></description></item><item><title>Controlled inputs and performance</title><link>https://til.neilmagee.com/post/controlled-inputs-and-performance/</link><pubDate>Tue, 04 Jun 2019 09:48:31 +0100</pubDate><guid>https://til.neilmagee.com/post/controlled-inputs-and-performance/</guid><description>&lt;p>Today I learned about the performance impact of using &lt;a href="https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/">controlled inputs&lt;/a> in React.&lt;/p>
&lt;p>I noticed that once I had multiples of a component I&amp;rsquo;d made on screen &lt;em>(that included text inputs)&lt;/em> the typing performance would begin to lag. It also got exponentially worse for each additional component.&lt;/p>
&lt;h2 id="onchange-vs-onblur">onChange vs onBlur&lt;/h2>
&lt;p>The main difference I tried was changing my event from &lt;code>onChange&lt;/code> to &lt;code>onBlur&lt;/code> (this was based on some &lt;a href="https://stackoverflow.com/a/38914965">Stack Overflow&lt;/a> advice).&lt;/p>
&lt;h3 id="before">Before&lt;/h3>
&lt;figure>
&lt;img src="https://til.neilmagee.com/images/controlled-inputs-performance/bad.gif"
alt="Animated gif showing poor input performance"loading="lazy"
/> &lt;figcaption>
&lt;h4>Laggy input performance&lt;/h4>
&lt;/figcaption>
&lt;/figure></description></item><item><title>Material UI theming and style overrides - Part 3</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-3/</link><pubDate>Fri, 31 May 2019 14:54:14 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-3/</guid><description>&lt;p>Today I learned more about sharing styles across React components. Although CSS-in-JS is new to me, it is pretty easy to pick up (&lt;em>Although I have not formed a final opinion on it yet&amp;hellip;&lt;/em>). I think Material UI uses &lt;a href="https://github.com/cssinjs/react-jss">React JSS&lt;/a> under the hood, so a style can be written as an object:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">makeStyles&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@material-ui/styles&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">useStyles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">makeStyles&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">root&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">backgroundColor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;red&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">MyComponent&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">classes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useStyles&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span> &lt;span class="nx">className&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">classes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">root&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="refactor-to-be-more-dry">Refactor to be more DRY&lt;/h2>
&lt;p>I had three components that were pretty similar to each other, with enough unique parts to keep them seperate. But they all had a style object in them. I could see the &lt;strong>style object was about 90% duplicated&lt;/strong> between each component. So after using a diff tool to see what the differences were, I extracted the shared styles out into a new file called &lt;code>Styles.js&lt;/code>. That looks a little like this:&lt;/p></description></item><item><title>Material UI theming and style overrides - Part 2</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-2/</link><pubDate>Tue, 28 May 2019 11:02:49 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-2/</guid><description>&lt;p>Today I learned that my previous attempt at theming a &lt;em>Material UI&lt;/em> component was not right. I thought the &lt;em>default theme&lt;/em> overrides I was providing were also being used in the &lt;em>component style&lt;/em> overrides. But they were not.&lt;/p>
&lt;p>After debugging the theme object in Chrome, I could see that before &lt;code>useStyles()&lt;/code> was called, my theme object was as expected, with my colour set. But the when I stepped into the &lt;code>useStyles()&lt;/code> function and observed the theme object it was using, the colour was not right. I had assumed that the styles argument that &lt;code>makeStyles&lt;/code> took was my &lt;em>global&lt;/em> &lt;code>theme&lt;/code> object. The &lt;code>AppBar&lt;/code> background was yellow, so the theme was working in general, just not for my &lt;em>component style&lt;/em> overrides.&lt;/p>
&lt;p>I put a &lt;a href="https://codesandbox.io/s/fervent-meninsky-hqnlq">CodeSandbox&lt;/a> together to illustrate the differences:&lt;/p></description></item><item><title>Material UI theming and style overrides - Part 1</title><link>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-1/</link><pubDate>Fri, 24 May 2019 12:37:01 +0100</pubDate><guid>https://til.neilmagee.com/post/material-ui-theming-and-style-overrides-part-1/</guid><description>&lt;p>Today I learned how to extend the Material UI &lt;a href="https://material-ui.com/customization/themes/">default theme&lt;/a> and retain the default theme settings for my own style overrides.&lt;/p>
&lt;p>This takes a little explaining. The &lt;strong>Theme&lt;/strong> in Material UI is responsible for the higher level styling. It contains settings for the colour palette, typography and other useful helper methods such as &lt;code>theme.spacing()&lt;/code>. &lt;strong>Style overrides&lt;/strong> I would define as fine level style changes of the Material UI components, for example changing the thickness of an underline on a input component.&lt;/p></description></item><item><title>The basics of React Redux</title><link>https://til.neilmagee.com/post/the-basics-of-react-redux/</link><pubDate>Mon, 20 May 2019 16:39:16 +0100</pubDate><guid>https://til.neilmagee.com/post/the-basics-of-react-redux/</guid><description>&lt;p>Today I learned the basics of &lt;a href="https://react-redux.js.org/">React Redux&lt;/a> because the &lt;code>state&lt;/code> requirements of the React app I have been building are now in need of a better solution.&lt;/p>
&lt;p>I am a fairly experienced front-end developer, and I know how to use lots of technologies. But I was struggling with grasping the fundamentals of using React Redux. I have used &lt;a href="https://vuex.vuejs.org/">Vuex&lt;/a> previously, which I picked up pretty quickly and I thought it would be similar. They are similar in concept, but not in execution. I think Vue deserves a lot of credit for their documentation as it is really good.&lt;/p>
&lt;p>What I was looking for was a basic tutorial, the &lt;em>most&lt;/em> basic. But every &amp;ldquo;basic&amp;rdquo; tutorial was how to make a &lt;em>todo&lt;/em> app. But I honestly needed a &lt;em>Hello world&lt;/em>, just to see how the code was wired together. This is from the redux documentation:&lt;/p>
&lt;blockquote>
&lt;p>Don&amp;rsquo;t be fooled by all the fancy talk about reducers, middleware, store enhancers—Redux is incredibly simple. If you&amp;rsquo;ve ever built a Flux application, you will feel right at home. If you&amp;rsquo;re new to Flux, it&amp;rsquo;s easy too!&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://redux-docs.netlify.com/basics/basic-tutorial">Source&lt;/a>&lt;/p>
&lt;p>I would agree in hindsight that it is relatively easy, but the path to that knowledge is shrouded in fog. It was time to find alternative education!&lt;/p></description></item><item><title>Front-end test drive: Material UI</title><link>https://til.neilmagee.com/post/front-end-test-drive-material-ui/</link><pubDate>Thu, 16 May 2019 16:37:08 +0100</pubDate><guid>https://til.neilmagee.com/post/front-end-test-drive-material-ui/</guid><description>&lt;p>Today I learned how to apply style overrides to &lt;a href="https://next.material-ui.com">Material UI&lt;/a> (v4.0.0-beat.2), a React front-end component library.&lt;/p>
&lt;p>The company I work for is looking to develop some new tools, which we want to get to a prototype stage as soon as possible. We have decided to use React as part of our tech stack (&lt;em>which is good&lt;/em>), and knowing that the UI that these tools require is going to need a lot of UI components, I started to look at front-end component libraries (mainly Material UI and Ant Design).&lt;/p>
&lt;p>I did a analysis of the types of UI components we need to build our tool - tooltips, various inputs, switch style buttons, modals, dialogs &amp;amp; drop downs. I wanted to make a test &amp;lsquo;App&amp;rsquo; that would combine various components from the library. My main goal was to see how this library was going to be to work with.&lt;/p></description></item><item><title>Simplify React components</title><link>https://til.neilmagee.com/post/simplify-react-components/</link><pubDate>Wed, 09 Jan 2019 17:04:41 +0000</pubDate><guid>https://til.neilmagee.com/post/simplify-react-components/</guid><description>&lt;p>Today I learned a bit more about why setting props against state is considered an anti-pattern. After my &lt;a href="https://til.neilmagee.com/post/react-update-state-from-props/">previous article&lt;/a>, I was not happy with the component. It still felt like &lt;code>getDerivedStateFromProps&lt;/code> was a hack rather than a maintainable fix. Plus in using the component, I was still triggering bugs that were quite situational.&lt;/p>
&lt;p>I read more on &lt;a href="https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recap">the react blog&lt;/a> and the recap really nailed what I needed to do.&lt;/p>
&lt;blockquote>
&lt;p>For example, rather than a child accepting a “committed” props.value and tracking a “draft” state.value, have the parent manage both state.draftValue and state.committedValue and control the child’s value directly.&lt;/p>
&lt;/blockquote>
&lt;p>This accurately described a process, to make my component simpler (I think it qualifies as a controlled component now), that would remove side effects. So I set out to remove state from this component and make it&amp;rsquo;s parent responsible for passing in the correct data as props.&lt;/p></description></item><item><title>Update state from props in React</title><link>https://til.neilmagee.com/post/update-state-from-props-in-react/</link><pubDate>Tue, 08 Jan 2019 11:11:05 +0000</pubDate><guid>https://til.neilmagee.com/post/update-state-from-props-in-react/</guid><description>&lt;p>Today I learned how to use a new(ish) React lifecycle hook called &lt;code>getDerivedStateFromProps&lt;/code> (&lt;a href="https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props">link&lt;/a>). I have struggled a little bit with form components that allow you to edit data. In my example below it is &amp;ldquo;user&amp;rdquo; data, but in reality this could affect all forms with any data in React.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>The reason for the struggle is a slight conflict for the one true source of the data for the form. When the &amp;ldquo;user&amp;rdquo; is edited, and the &lt;strong>user form component&lt;/strong> is used, data is fed into it via props from it&amp;rsquo;s &lt;em>parent component&lt;/em>. So the Employer and Job title current values can appear in their relevant inputs.&lt;/p>
&lt;p>That would be ok if that data was static, but the data is not and it needs to be editable. So the props are copied into the &lt;strong>user form component&lt;/strong> state. And this state is used as the value of the relevant inputs. That allows the inputs to receive new data, which triggers off a chain of events.&lt;/p>
&lt;p>The new data is processed via a &lt;code>handleChange&lt;/code> event in the &lt;strong>user form component&lt;/strong>. Two things happen, it is added to the current state and also passed to a &lt;em>parent component&lt;/em> for other actions to happen. When that &lt;em>parent component&lt;/em> is done, it sends that data back to this &lt;strong>user form component&lt;/strong> as props and the cycle can continue.&lt;/p></description></item><item><title>React Prevent Re-renders</title><link>https://til.neilmagee.com/post/react-prevent-re-renders/</link><pubDate>Wed, 07 Nov 2018 09:26:33 +0000</pubDate><guid>https://til.neilmagee.com/post/react-prevent-re-renders/</guid><description>&lt;p>Today I learned how to prevent React from unnecessarily re-rendering a component:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">shouldComponentUpdate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nextProps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Compare the props with one another
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">actions&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="nx">nextProps&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">actions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I was trying to use a loop to sort some items prior to rendering them in a component. During the debug step I kept seeing the loop run twice, when I was only expecting it to run once.&lt;/p></description></item><item><title>React Conditional Rendering</title><link>https://til.neilmagee.com/post/react-conditional-rendering/</link><pubDate>Mon, 05 Nov 2018 17:13:02 +0000</pubDate><guid>https://til.neilmagee.com/post/react-conditional-rendering/</guid><description>&lt;p>Today I learned how to conditionally render a React component. I was using CSS to show and hide different components in reaction to the App&amp;rsquo;s state. Setting a component to be &lt;code>display: none;&lt;/code> or control it&amp;rsquo;s opacity. The problem was that React was throwing up some warnings that were coming from &amp;ldquo;invisible&amp;rdquo; components, that were receiving props before they were really meant to. This is probably representative of a deeper problem in my App structure.&lt;/p>
&lt;p>Having finally read the &lt;a href="https://reactjs.org/docs/conditional-rendering.html">conditional rendering&lt;/a> page, I have chosen the &amp;ldquo;Inline If with Logical &amp;amp;&amp;amp; Operator&amp;rdquo; pattern for my App. Below is a stripped down example:&lt;/p>
&lt;h2 id="parent-app">Parent App&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">Component&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;react&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">MyComponent&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;./components/MyComponent.jsx&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">class&lt;/span> &lt;span class="nx">App&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">componentIsActive&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">setComponentActive&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Something else could trigger this
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setState&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">componentIsActive&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="c1">// The component is passed a prop from the state
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">MyComponent&lt;/span>
&lt;span class="nx">active&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">componentIsActive&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="o">/&amp;gt;&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">App&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>React With Debounce</title><link>https://til.neilmagee.com/post/react-with-debounce/</link><pubDate>Wed, 24 Oct 2018 20:10:38 +0100</pubDate><guid>https://til.neilmagee.com/post/react-with-debounce/</guid><description>&lt;p>Today I learned how to debounce inputs in a &lt;a href="https://reactjs.org/">React&lt;/a> component. This is something I have done in many other places, in plain JavaScript, in jQuery, in AngularJs and in VueJs. Whilst the concept is the same - have a user input some data (text, date, email, whatever), wait a short amount of time so that the user has finished typing and then do something. The idea being the &amp;ldquo;do something&amp;rdquo; does not happen whilst the user is still adding their data.&lt;/p></description></item></channel></rss>