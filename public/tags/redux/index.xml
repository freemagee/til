<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>redux on TIL</title><link>https://til.neilmagee.com/tags/redux/</link><description>Recent content in redux on TIL</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 28 Oct 2019 09:29:17 +0000</lastBuildDate><atom:link href="https://til.neilmagee.com/tags/redux/index.xml" rel="self" type="application/rss+xml"/><item><title>Asynchronous redux - Part 1</title><link>https://til.neilmagee.com/post/aynchronous-redux-pt1/</link><pubDate>Mon, 28 Oct 2019 09:29:17 +0000</pubDate><guid>https://til.neilmagee.com/post/aynchronous-redux-pt1/</guid><description>&lt;p&gt;This is not a traditional &lt;strong&gt;&amp;ldquo;Today I learned&amp;rdquo;&lt;/strong&gt; post. It is more like a &lt;strong&gt;&amp;ldquo;Recently I learned&amp;rdquo;&lt;/strong&gt;. I have been using &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt; as a system to control state across an app that has a lot of state. Once you get used to the actionType, action, reducer and selector pattern it really provides a deep level of control.&lt;/p&gt;
&lt;h2 id=&#34;state-complexity&#34;&gt;State complexity&lt;/h2&gt;
&lt;p&gt;It was not long before the need for complex redux actions became clear when the app required data from APIs. That data needed to be requested, processed and added to the redux store before other components could consume it.&lt;/p&gt;
&lt;p&gt;This lead me to &lt;a href=&#34;https://github.com/reduxjs/redux-thunk&#34;&gt;Redux Thunk&lt;/a&gt; as a way to define actions that were more complex than simply returning a plain object. Often these actions would need to execute promises. So a need to control the sequence of these actions was becoming a priority for the app.&lt;/p&gt;</description></item><item><title>React Redux is pretty great!</title><link>https://til.neilmagee.com/post/react-redux-is-pretty-great/</link><pubDate>Tue, 25 Jun 2019 10:17:37 +0100</pubDate><guid>https://til.neilmagee.com/post/react-redux-is-pretty-great/</guid><description>&lt;p&gt;Today I learned to really appreciate &lt;a href=&#34;https://react-redux.js.org/&#34;&gt;React Redux&lt;/a&gt;. I have used &lt;a href=&#34;https://redux.js.org/introduction/prior-art#flux&#34;&gt;Flux&lt;/a&gt; like patterns only a handful of times. Mainly in Vue using &lt;a href=&#34;https://vuex.vuejs.org/&#34;&gt;Vuex&lt;/a&gt;. But it&amp;rsquo;s been a while since I last used one.&lt;/p&gt;
&lt;p&gt;I am in the middle of building a prototype App in React and the &lt;em&gt;&amp;ldquo;main&amp;rdquo;&lt;/em&gt; component was becoming unwieldy. It contained all the main state, all the functions that were passed to child components as props and the way things were going, it was about to become responsible for asyncronous data as well. That is too much for one component.&lt;/p&gt;</description></item><item><title>Asynchronous redux - Part 2</title><link>https://til.neilmagee.com/post/aynchronous-redux-pt2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://til.neilmagee.com/post/aynchronous-redux-pt2/</guid><description>&lt;p&gt;Following on from my &lt;a href=&#34;https://til.neilmagee.com/post/aynchronous-redux/&#34;&gt;previous post&lt;/a&gt;, I am going to show a real example of asynchronous redux. The pattern below is used in many places in the app I am working on. It provides control for what is going to happen when the app needs to request/interact with data from the API.&lt;/p&gt;</description></item></channel></rss>