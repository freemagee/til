<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>css on TIL</title><link>https://til.neilmagee.com/tags/css/</link><description>Recent content in css on TIL</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 23 Jan 2020 10:02:46 +0000</lastBuildDate><atom:link href="https://til.neilmagee.com/tags/css/index.xml" rel="self" type="application/rss+xml"/><item><title>Tailwindcss configs</title><link>https://til.neilmagee.com/post/tailwindcss-configs/</link><pubDate>Thu, 23 Jan 2020 10:02:46 +0000</pubDate><guid>https://til.neilmagee.com/post/tailwindcss-configs/</guid><description>&lt;p&gt;Today I learned more about controlling &lt;a href=&#34;https://tailwindcss.com&#34;&gt;Tailwindcss&lt;/a&gt; output CSS. Based on my &lt;a href=&#34;https://til.neilmagee.com/post/controlling-tailwind/&#34;&gt;previous post&lt;/a&gt; I am now in a position to use Tailwindcss on a client project. That means I have been digging into the documentation and that has revealed to me a few more intricacies of the &lt;code&gt;tailwind.config.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I started off by adding only the corePlugins I wanted to use to the config. But as that list grew it became clear that selectively disabling corePlugins was going to be simpler than adding the ones I wanted to use.&lt;/p&gt;
&lt;p&gt;So I got a list of all the &lt;a href=&#34;https://tailwindcss.com/docs/configuration/#core-plugins&#34;&gt;corePlugins&lt;/a&gt;, processed it in my text editor and used that to generate some boilerplate configs. Those configs are meant to be edited to taste and not used as they are.&lt;/p&gt;
&lt;p&gt;I put this together in a new &lt;a href=&#34;https://github.com/freemagee/tailwindcss-configs&#34;&gt;GitHub repo&lt;/a&gt; with some explanations of the configs and examples of their output CSS.&lt;/p&gt;</description></item><item><title>Controlling Tailwindcss</title><link>https://til.neilmagee.com/post/controlling-tailwindcss/</link><pubDate>Thu, 08 Aug 2019 14:49:02 +0100</pubDate><guid>https://til.neilmagee.com/post/controlling-tailwindcss/</guid><description>&lt;p&gt;Today I learned how to control &lt;a href=&#34;https://tailwindcss.com&#34;&gt;Tailwindcss&lt;/a&gt;. I am planning on using &lt;strong&gt;Tailwindcss&lt;/strong&gt; on an upcoming project and in order to put something new like this onto a production website, I need to understand it deeply.&lt;/p&gt;
&lt;h2 id=&#34;tailwindcss-out-of-the-box&#34;&gt;Tailwindcss out of the box&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* input.css */
@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// tailwind.config.js
module.exports = {
theme: {},
variants: {},
plugins: []
};
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# command
tailwind build input.css -o output.css
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Putting the above together and running the command will output a &lt;code&gt;css&lt;/code&gt; file that is &lt;strong&gt;54309&lt;/strong&gt; lines of code and &lt;strong&gt;854.59KB&lt;/strong&gt; in file size! The developers talk about this on the &lt;a href=&#34;https://tailwindcss.com/docs/controlling-file-size&#34;&gt;official site&lt;/a&gt; and it is not the recommended way to use Tailwindcss. What I needed to know was what config settings could create a very minimal output that I could add to as I needed it.&lt;/p&gt;</description></item><item><title>Tachyons Components</title><link>https://til.neilmagee.com/post/tachyons-components/</link><pubDate>Mon, 19 Nov 2018 14:54:11 +0000</pubDate><guid>https://til.neilmagee.com/post/tachyons-components/</guid><description>&lt;p&gt;Today I learned a bit more about using &lt;a href=&#34;http://tachyons.io/&#34;&gt;Tachyons&lt;/a&gt; to make components. I read about Tachyons a long time ago and had a pretty common reaction to it which was to dismiss it outright. I come from a background of having learnt CSS when semantics were being preached. Carefully named classes were chosen for their meaning, and keeping styles out of HTML was important.&lt;/p&gt;
&lt;p&gt;But my views have matured over time as I started to use BEM for CSS naming and realised the limitations of creating classes and how rubbish humans are at naming things. Especially when maintaining larger systems. I read &lt;a href=&#34;https://hackernoon.com/full-re-write-with-tachyons-and-functional-css-a-case-study-part-1-635ccb5fb00b&#34;&gt;articles&lt;/a&gt; about &lt;a href=&#34;https://adamwathan.me/css-utility-classes-and-separation-of-concerns/&#34;&gt;utility classes&lt;/a&gt; and slowly I began to agree with their perspective.&lt;/p&gt;</description></item></channel></rss>