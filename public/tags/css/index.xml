<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>css on Front-end web development | Neil Magee</title><link>https://til.neilmagee.com/tags/css/</link><description>Recent content in css on Front-end web development | Neil Magee</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 23 Jan 2020 10:02:46 +0000</lastBuildDate><atom:link href="https://til.neilmagee.com/tags/css/index.xml" rel="self" type="application/rss+xml"/><item><title>Tailwindcss configs</title><link>https://til.neilmagee.com/post/tailwindcss-configs/</link><pubDate>Thu, 23 Jan 2020 10:02:46 +0000</pubDate><guid>https://til.neilmagee.com/post/tailwindcss-configs/</guid><description>&lt;p>Today I learned more about controlling &lt;a href="https://tailwindcss.com">Tailwindcss&lt;/a> output CSS. Based on my &lt;a href="https://til.neilmagee.com/post/controlling-tailwindcss/">previous post&lt;/a> I am now in a position to use Tailwindcss on a client project. That means I have been digging into the documentation and that has revealed to me a few more intricacies of the &lt;code>tailwind.config.js&lt;/code>.&lt;/p>
&lt;p>I started off by adding only the corePlugins I wanted to use to the config. But as that list grew it became clear that selectively disabling corePlugins was going to be simpler than adding the ones I wanted to use.&lt;/p>
&lt;p>So I got a list of all the &lt;a href="https://tailwindcss.com/docs/configuration/#core-plugins">corePlugins&lt;/a>, processed it in my text editor and used that to generate some boilerplate configs. Those configs are meant to be edited to taste and not used as they are.&lt;/p>
&lt;p>I put this together in a new &lt;a href="https://github.com/freemagee/tailwindcss-configs">GitHub repo&lt;/a> with some explanations of the configs and examples of their output CSS.&lt;/p></description></item><item><title>Controlling Tailwindcss</title><link>https://til.neilmagee.com/post/controlling-tailwindcss/</link><pubDate>Thu, 08 Aug 2019 14:49:02 +0100</pubDate><guid>https://til.neilmagee.com/post/controlling-tailwindcss/</guid><description>&lt;p>Today I learned how to control &lt;a href="https://tailwindcss.com">Tailwindcss&lt;/a>. I am planning on using &lt;strong>Tailwindcss&lt;/strong> on an upcoming project and in order to put something new like this onto a production website, I need to understand it deeply.&lt;/p>
&lt;h2 id="tailwindcss-out-of-the-box">Tailwindcss out of the box&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="c">/* input.css */&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">tailwind&lt;/span> &lt;span class="nt">base&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">tailwind&lt;/span> &lt;span class="nt">components&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">tailwind&lt;/span> &lt;span class="nt">utilities&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// tailwind.config.js
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">theme&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">variants&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">plugins&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># command&lt;/span>
tailwind build input.css -o output.css
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Putting the above together and running the command will output a &lt;code>css&lt;/code> file that is &lt;strong>54309&lt;/strong> lines of code and &lt;strong>854.59KB&lt;/strong> in file size! The developers talk about this on the &lt;a href="https://tailwindcss.com/docs/controlling-file-size">official site&lt;/a> and it is not the recommended way to use Tailwindcss. What I needed to know was what config settings could create a very minimal output that I could add to as I needed it.&lt;/p></description></item><item><title>Tachyons Components</title><link>https://til.neilmagee.com/post/tachyons-components/</link><pubDate>Mon, 19 Nov 2018 14:54:11 +0000</pubDate><guid>https://til.neilmagee.com/post/tachyons-components/</guid><description>&lt;p>Today I learned a bit more about using &lt;a href="http://tachyons.io/">Tachyons&lt;/a> to make components. I read about Tachyons a long time ago and had a pretty common reaction to it which was to dismiss it outright. I come from a background of having learnt CSS when semantics were being preached. Carefully named classes were chosen for their meaning, and keeping styles out of HTML was important.&lt;/p>
&lt;p>But my views have matured over time as I started to use BEM for CSS naming and realised the limitations of creating classes and how rubbish humans are at naming things. Especially when maintaining larger systems. I read &lt;a href="https://hackernoon.com/full-re-write-with-tachyons-and-functional-css-a-case-study-part-1-635ccb5fb00b">articles&lt;/a> about &lt;a href="https://adamwathan.me/css-utility-classes-and-separation-of-concerns/">utility classes&lt;/a> and slowly I began to agree with their perspective.&lt;/p></description></item></channel></rss>