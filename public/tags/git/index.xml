<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Front-end web development | Neil Magee</title><link>https://til.neilmagee.com/tags/git/</link><description>Recent content in git on Front-end web development | Neil Magee</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 03 Jan 2019 14:52:45 +0000</lastBuildDate><atom:link href="https://til.neilmagee.com/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Undo a Git commit and redo</title><link>https://til.neilmagee.com/post/undo-a-git-commit-and-redo/</link><pubDate>Thu, 03 Jan 2019 14:52:45 +0000</pubDate><guid>https://til.neilmagee.com/post/undo-a-git-commit-and-redo/</guid><description>&lt;p>Today I learned how to sort out a &lt;strong>local&lt;/strong> mistake in Git&lt;!-- raw HTML omitted -->1&lt;!-- raw HTML omitted -->:&lt;/p>
&lt;pre>&lt;code>$ git commit -m &amp;quot;Something terribly misguided&amp;quot; # (1)
$ git reset HEAD~ # (2)
&amp;lt;&amp;lt; edit files as necessary &amp;gt;&amp;gt; # (3)
$ git add ... # (4)
$ git commit -c ORIG_HEAD # (5)
&lt;/code>&lt;/pre>&lt;ol>
&lt;li>This is what you want to undo&lt;/li>
&lt;li>This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they&amp;rsquo;ll appear as &amp;ldquo;Changes not staged for commit&amp;rdquo; in &lt;code>git status&lt;/code>, and you&amp;rsquo;ll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->, you could use &lt;code>git reset --soft HEAD~&lt;/code> instead, which is like &lt;code>git reset HEAD~&lt;/code> (where &lt;code>HEAD~&lt;/code> is the same as &lt;code>HEAD~1&lt;/code>) but leaves your existing changes staged.&lt;/li>
&lt;li>Make corrections to working tree files.&lt;/li>
&lt;li>git add anything that you want to include in your new commit.&lt;/li>
&lt;li>Commit the changes, reusing the old commit message. reset copied the old head to &lt;code>.git/ORIG_HEAD&lt;/code>; &lt;code>commit&lt;/code> with &lt;code>-c ORIG_HEAD&lt;/code> will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the &lt;code>-C&lt;/code> option.&lt;/li>
&lt;/ol></description></item></channel></rss>